{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DevOps Package","text":"<p>Intro</p>"},{"location":"#contents","title":"Contents","text":"<p>DevOps Intro</p> <p></p> <p>Definition of DevOps</p> <p>Contents of this Package</p>"},{"location":"#what-is-devops","title":"What is DevOps?","text":""},{"location":"#common-problems-concerns","title":"Common Problems &amp; Concerns","text":"<p>AS Project Development</p> <p>Have you or your customers made comments like this?</p> <p>\u201cIt\u2019s difficult to keep track of what still needs to be done in this project\u201d</p> <p>\u201cI wish I could develop new features faster\u201d</p> <p>\u201cI need to somehow figure out how to do more work with less people\u201d</p> <p>\u201cI\u2019m too busy fighting fires\\, I don\u2019t have time to improve my processes\u201d</p> <p>\u201cIt takes too long to deploy bugfixes in the field\u201d</p> <p>\u201cI have a testing process\\, but it\u2019s tedious and time consuming\u201d</p> <p>\u201cI don\u2019t have a good systematic process for testing my code before deployment\u201d</p>"},{"location":"#solution-devops","title":"Solution: DevOps","text":"<p>AS Project Development</p> <p>One way to address these kinds of problems is a set of practices called  DevOps</p> <p></p>"},{"location":"#what-is-devops_1","title":"What is DevOps?","text":"<p>A Brief Definition</p> <p></p> <p>DevOps is the union of  dev elopment and IT  op erations to continually\\, reliably\\, and quickly provide product to customers</p> <p>A Brief Definition</p> <p></p> <p></p> <p>Product  = AS project</p> <p>Dev  = Applications Engineer tasks</p> <p>Ops  = Project Manager / Commissioning Engineer tasks</p> <p>Ops: creating the PIP, ARsim package, automated testing, etc</p> <p>A Brief Definition</p> <p>\u2026 to accomplish goals such as:</p> <p>Increasing productivity</p> <p>Increasing the frequency of deployments</p> <p>Increasing code quality</p> <p>Reducing response time for bugfixes</p> <p>Reducing fire-fighting</p> <p>DevOps involves things like\u2026</p> <p>Increasing the visibility of tasks and metrics</p> <p>Dividing and planning work in measurable chunks</p> <p>Optimizing team and project architecture</p> <p>Automated testing and reporting</p> <p></p>"},{"location":"#mission-statement","title":"Mission Statement","text":"<p>DevOps Package</p> <p>Implementing DevOps involves workflow changes\\, as well as a notable culture shift. Therefore\\, the mission and purpose of this DevOps package is:</p> <p>To significantly  __reduce the barriers to entry __ of DevOps strategies into the day-to-day workflow of B&amp;R applications engineers in order to  __increase the efficiency\\, quality\\, and maintainability __ of AS project development</p>"},{"location":"#br-americas-standard","title":"B&amp;R Americas Standard","text":"<p>DevOps Package</p> <p>The information in these materials is the new standard for AS project development in B&amp;R Americas</p> <p>There will be exceptions to the rule on a case-by-case basis\\, but this is now the defined starting point</p> <p></p>"},{"location":"#devops-package-contents","title":"DevOps Package Contents","text":""},{"location":"#_1","title":"Introduction","text":"<p>To Do: Add a workflow from beginning to end\\, which touches on all 4 parts of the contents</p>"},{"location":"#devops-package-contents_1","title":"DevOps Package Contents","text":"<p>What\u2019s Included?</p> <p>The DevOps package includes material for the following subjects:</p> <p>Project Management</p> <p>Version Control</p> <p>Automation &amp; Build Server</p> <p>Testing</p> <p>There is also an overview PPT for the sales team to use to present the topic to customers. This PPT includes a script in the slide notes.</p> <p></p> <p>What\u2019s Included?</p> <p>For each of these subjects\\, the package contains  reference material  and  template files .</p> <p>Wherever applicable\\, we provide template files to expedite your implementation of that part of the DevOps process</p> <p>The reference material explains the conceptual information behind the subject\\, including what it is\\, why it\u2019s important\\, how you should implement it\\, and other various tips and tricks</p> <p></p> <p></p> <p>Reference Material</p> <p>Continuous Improvement over Time</p> <p>These materials will be added to and amended over time</p> <p>If you have any ideas or content that would be valuable to add\\, please inform Wes/Brittany</p> <p></p>"},{"location":"#get-started","title":"Get Started!","text":"<p>DevOps at B&amp;R</p> <p>To get started\\, open up the PPT for the topic of interest. The PPT will guide you through the topic and explain all template files as they come up.</p> <p>If you have any questions\\, please reach out to Brittany Langston or Wesley Buchanan.</p> <p></p>"},{"location":"AutomationBuildServer/","title":"Automation and Build Server","text":"<p>B&amp;R Internal</p>"},{"location":"AutomationBuildServer/#automation-build-server","title":"Automation &amp; Build Server","text":"<p>DevOps Package</p>"},{"location":"AutomationBuildServer/#mission-statement","title":"Mission Statement","text":"<p>DevOps Package</p> <p>To significantly  __reduce the barriers to entry __ of DevOps strategies into the day-to-day workflow of B&amp;R applications engineers in order to  __increase the efficiency\\, quality\\, and maintainability __ of AS project development</p>"},{"location":"AutomationBuildServer/#contents","title":"Contents","text":"<p>Automation &amp; Build Server</p> <p></p> <ul> <li>What is it?</li> <li>Why is it important?</li> <li>Included Template Files</li> <li>How to Implement</li> <li>How to use Jenkins</li> <li>B&amp;R-Jenkins Helper Library</li> <li>Getting Started</li> <li>Customizing the Jenkinsfile</li> <li>Integration with Bitbucket</li> </ul>"},{"location":"AutomationBuildServer/#what-is-it","title":"What is it?","text":"<p>Automation &amp; Build Server</p>"},{"location":"AutomationBuildServer/#automation-build-server_1","title":"Automation &amp; Build Server","text":"<p>Definition</p> <p>Automation Server</p> <p>A build server is an isolated production environment where software projects are compiled and built.</p> <p>The code is pulled directly from a source control repository prior to build.</p> <ul> <li>An automation server is used to automate tasks and processes.</li> <li>The automation server monitors the source control repo. As soon as a code change is checked into the repo (or at a specific time interval)\\, the automation server will automatically trigger the following:</li> <li>Check out the latest version of the code from the source control repo</li> <li>Compile the code on the build server</li> <li>Initiate the automated unit/integration tests</li> <li>Communicate the results (pass/fail) to the interested parties via email\\, Teams\\, Confluence\\, etc</li> <li>Initiate automated deployment</li> <li>\u2026 and so on</li> <li>The automation server is essentially the \u201cpuppet master\u201d of the automations within the DevOps process</li> </ul>"},{"location":"AutomationBuildServer/#why-is-it-important","title":"Why is it important?","text":"<p>Build &amp; Automation Server</p>"},{"location":"AutomationBuildServer/#benefits","title":"Benefits","text":"<p>Build &amp; Automation Server</p> <ul> <li>By building the project and running tests in an isolated production environment\\, you will be testing against a collection of known dependencies. In other words\\, you avoid the \u201cit fails for you\\, but it works on my PC\u201d situation</li> <li>By automating the deployment pipeline with a build server\\, developers quickly receive feedback about whether their changes introduced a problem into the system</li> <li>The sooner a problem is identified\\, the easier/cheaper it is to fix</li> <li>The build server provides a clear paper trail for what change introduced a problem</li> <li>When used in combination with proper version control practices\\, the latest version of code will always be in a releasable state</li> <li>Since the releases are automated and not manual\\, release steps are consistent and no steps are forgotten</li> </ul>"},{"location":"AutomationBuildServer/#target-applications","title":"Target Applications","text":"<p>Build &amp; Automation Server</p> <p>x</p> <ul> <li>__Any and all __ applications can benefit from the incorporation of a build and automation server</li> <li>Any steps that are triggered automatically are inherently more efficient and reliable than executing the step manually</li> <li>These are general software development tools that will give us a strategic advantage over our competitors</li> <li>A build and automation server is particularly useful if:</li> <li>You are managing multiple projects<ul> <li>The automation server will update all interested parties via email / Teams</li> <li>The build server will automatically generate the PIP in a consistent environment\\, which makes machine updates easier because only the changes will get transferred to the target</li> </ul> </li> <li>The application has unit tests<ul> <li>The automation server will run them automatically and more frequently</li> <li>The build/automation server will allow for a clean slate testing environment</li> <li>The build server triggers all tests\\, so you have confidence that your code changes don\u2019t impact other aspects of the code</li> </ul> </li> </ul>"},{"location":"AutomationBuildServer/#included-template-files","title":"Included Template Files","text":"<p>DevOps Package</p> <p>Automation &amp; Build Server</p> <p>The only template file provided for this topic is a template Jenkinsfile.</p> <p>Further explanation on how to edit this Jenkinsfile according to your situation is provided later on.</p> <p></p>"},{"location":"AutomationBuildServer/#how-to-implement","title":"How to Implement","text":"<ul> <li>How to use Jenkins</li> <li>B&amp;R-Jenkins Helper Library</li> <li>Getting Started</li> <li>Customizing the Jenkinsfile</li> <li>Integration with Bitbucket</li> </ul>"},{"location":"AutomationBuildServer/#how-to-use-jenkins","title":"How to use Jenkins","text":""},{"location":"AutomationBuildServer/#jenkins","title":"Jenkins","text":"<p>Proposed Tool for B&amp;R Internal</p> <p>Jenkins is a very popular\\, open-source tool which provides deployment pipeline functionality</p> <p>It can be used to automate all sorts of tasks related to building\\, testing\\, delivering and deploying software</p> <p>This is what we will use for our build servers in B&amp;R NA</p> <p></p>"},{"location":"AutomationBuildServer/#atl-jenkins-server","title":"ATL Jenkins Server","text":"<p>Used by All NA Regions</p> <ul> <li>Jenkins is installed in a VM on the Atlanta server</li> <li>All North America regions and territories will use this build server<ul> <li>If you work out of a regional office and want to install Jenkins locally instead\\, contact Brittany and Wes for the necessary steps</li> </ul> </li> <li>This Jenkins server is accessible via the following link:<ul> <li>http://brusatlavbuild1.br-automation.com:8080/</li> <li>Login credentials are the same as your Windows login</li> </ul> </li> <li>Docker containers are installed on the VM for AS4.10\u2013 4.12\\, to enable simultaneous AS builds (e.g. if two build chains happen to run at the same time)<ul> <li>If you are using &lt;AS4.10\\, please let us know and we will install another docker container accordingly</li> <li>Builds will queue if they are triggered at the same time</li> </ul> </li> </ul> <p></p> <p>Used by All NA Regions</p> <ul> <li>Although the Jenkins server is installed on the internal B&amp;R Atlanta server\\, it can still be used with customer projects that we are involved in. As long as someone on our team has credentials to access the customer repository\\, then our internal build server can interact with it.</li> <li>Note\\, however\\, that we are not set up to manage the customer\u2019s build/automation server after the project has been completed. Therefore\\, at that time they either need to set up their own Jenkins server\\, or they lose the Jenkins server functionality. The customer-facing version of this DevOps package will provide the steps for customers to set up their own server.</li> </ul> <p></p>"},{"location":"AutomationBuildServer/#multibranch-pipeline","title":"Multibranch Pipeline","text":"<p>Jenkins Project Type</p> <ul> <li>There are a few different project types within Jenkins\\, but the one we recommend is the  Multibranch Pipeline .</li> <li>A pipeline is a workflow defined in text-based code within a text file called \u201cJenkinsfile\u201d</li> <li>A Multibranch Pipeline project automatically creates sub-projects for every branch in the source code repository</li> <li>If a new branch is created and pushed to the repository\\, then a new sub-project in the multibranch pipeline is created and runs for that branch</li> <li>The Jenkinsfile is committed to the source control repository\\, so the pipeline itself is protected by version control</li> <li>This also means that the developers can freely/directly add steps to the pipeline</li> </ul>"},{"location":"AutomationBuildServer/#use-multiple-multibranch-pipelines","title":"Use Multiple Multibranch Pipelines","text":"<p>Recommendation</p> <ul> <li>You can configure multiple Jenkins pipelines to run in series</li> <li>Once the first pipeline completes successfully\\, the next one automatically starts running\\, and so on.</li> <li>Alternatively\\, since the pipelines are separated\\, you can run the integration tests (which typically take longer) at a lower frequency than the unit tests. The unit tests could run every time code is committed and pushed\\, but the integration test run only every 4 hours\\, for example.</li> </ul> <p>Build\\, Unit Tests</p> <p>Integration Testing</p> <p>(longer running tests)</p> <p>Release Deployment</p> <p>Machine Deployment</p> <p>Recommendation</p> <ul> <li>We recommend using at least the following 3 distinct multibranch pipelines for AS project development:</li> <li>Multibranch pipeline 1: Builds the project and runs unit tests</li> <li>Multibranch pipeline 2: Runs integration tests</li> <li>Multibranch pipeline 3: Handles the release deployment</li> <li>Note: the template Jenkinsfile in this DevOps package is a starter implementation that corresponds to one single pipeline for building the project\\, running unit tests\\, and release deployment. Integration testing is not yet included (this will come in a future update to the DevOps package).</li> </ul> <p>Build\\, Unit Tests</p> <p>Integration Testing</p> <p>(longer running tests)</p> <p>Release Deployment</p> <p>Machine Deployment</p>"},{"location":"AutomationBuildServer/#br-jenkins-helper-library","title":"B&amp;R-Jenkins Helper Library","text":"<p>ATL Jenkins Server</p> <p>Readymade Groovy Scripts</p> <ul> <li>The ATL Jenkins server uses a helper library that has a lot of useful functions for interacting with AS projects</li> <li>The library contains Groovy scripts\\, which are wrappers around Python scripts and general commands</li> <li>You don\u2019t need to edit this library at all\\, but you will be using it in your Jenkinsfile</li> <li>Public link to the library on GitHub: https://github.com/br-automation-com/BnR-Jenkins-Helper-Library</li> <li>The Groovy scripts are located within the \u201cvars\u201d folder on the repo</li> <li>The Python scripts that the Groovy scripts utilize are located within the \u201cresources\\scripts\u201d folder on the repo</li> <li>These scripts have been tested in AS4.7 and above. Prior AS versions may work\\, but they are currently untested.</li> <li>The available functions are described on the next slides and are provided here as an FYI. To skip forward to the steps for editing your Jenkinsfile\\, click here.</li> </ul>"},{"location":"AutomationBuildServer/#version-info-functions","title":"Version Info Functions","text":"<p>B&amp;R-Jenkins Helper Library</p> Function Description Arguments Version Returns full version number based on tag (e.g. 1.2.3.9004) workspace ReleaseVersion Returns Major.Minor.Bugfix style version number workspace MajorVersionNumber Returns just the Major version number workspace MinorVersionNumber Returns just the Minor version number workspace BugFixVersionNumber Returns just the bug version number workspace <p>The workspace is where Jenkins checks out the project from the repo and runs the pipeline.</p> <p>To reference the workspace in the Jenkinsfile\\, use the readymade environment variable \"${WORKSPACE}\"</p>"},{"location":"AutomationBuildServer/#git-info-functions","title":"Git Info Functions","text":"<p>B&amp;R-Jenkins Helper Library</p> Function Description Arguments BranchName Returns the name of the git branch workspace Tag Returns the last tag in the branch workspace IsReleaseCandidate Returns true if the branch is in the release/* branch workspace IsReleaseBranch Returns true if branch is master or main workspace <p>The workspace is where Jenkins checks out the project from the repo and runs the pipeline.</p> <p>To reference the workspace in the Jenkinsfile\\, use the readymade environment variable \"${WORKSPACE}\"</p>"},{"location":"AutomationBuildServer/#ar-helper-functions","title":"AR Helper Functions","text":"<p>B&amp;R-Jenkins Helper Library</p> Function Description Arguments BuildASProject Builds an Automation Studio Project project \u2013 path within the workspace to the project (the folder containing the .apj file). For example: \"$WORKSPACE\\TestProject\"configuration \u2013 configuration name in the AS projectmax_warnings \u2013 the maximum number or build warnings that are allowed in order to consider the build a success. Set this to -1 to accept infinite warningsbuildpip \u2013 whether to build the PIP or not BuildARsimStructure Creates the ARsim structure project \u2013 path within the workspace to the project (the folder containing the .apj file). For example: \"$WORKSPACE\\TestProject\"configuration \u2013 configuration name in the AS project"},{"location":"AutomationBuildServer/#unit-test-functions","title":"Unit Test Functions","text":"<p>B&amp;R-Jenkins Helper Library</p> Function Description Arguments RunArUnitTests Runs unit test configuration in ArSim tests \u2013 the name of the unit tests to run. Use \u201call\u201d to run all testsconfiguration \u2013 configuration name in the AS project that contains the unit testsproject \u2013 path within the workspace to the project (the folder containing the .apj file). For example: \"$WORKSPACE\\TestProject\u201c ProcessArTestResults Process test results xml files N/A"},{"location":"AutomationBuildServer/#information-sharing-functions","title":"Information Sharing Functions","text":"<p>B&amp;R-Jenkins Helper Library</p> Function Description Arguments UploadToGitHub Uploads build artifacts to a GitHub repository version \u2013 version number of the artifactorganization \u2013 repo organization namename \u2013 repo namefile \u2013 filename of the artifact to upload UploadToConfluence Uploads build artifacts to a Confluence page projectId \u2013 4-character project identifierpageName \u2013 name of the page in Confluence to upload tofile \u2013 filename of the artifact to uploadtoken \u2013 user credentials token for access rights SendNotifications Sends an email to team members buildStatus \u2013 the status/result of the most recent build of the pipelinerecipients \u2013 list of email addresses to send the email to"},{"location":"AutomationBuildServer/#getting-started","title":"Getting Started","text":""},{"location":"AutomationBuildServer/#create-a-multibranch-pipeline","title":"Create a Multibranch Pipeline","text":"<p>Submit Request</p> <p>When you are ready to create a pipeline\\, send an email to Brittany and Wes. We will then coordinate a meeting to create your pipeline together and go over a few additional details</p> <p>Note that all AS projects that you intend to run through a pipeline must be configured for ARsim in order for the full pipeline to be able to run (particularly\\, the automated tests)</p> <p>Once the pipeline is in place\\, open the template Jenkinsfile in a text editor to begin making your customizations</p> <p>Notes for Brittany/Wes:  Remember to ask them their AS version. If less than 4.7, we need to test the scripts. If 4.7 or 4.8, we need to install on the build server (it only has 4.9-4.12 right now). PIP installation settings \u2013 these ok?</p> <p>What if you want to run your pipeline for multiple configurations in the project \u2013 how would we do this?  You would just copy/paste the lines within each Step. See \u201cStages\u201d section. Help them through this in the first meeting. </p>"},{"location":"AutomationBuildServer/#overview-of-the-jenkinsfile-template","title":"Overview of the Jenkinsfile Template","text":"<p>DevOps Package</p> <p>The provided Jenkinsfile template accomplishes the following tasks:</p> <p>Builds the AS project</p> <p>Runs the unit tests</p> <p>Creates an ARsim structure and PIP</p> <p>Uploads the ARsim structure and PIP to GitHub or Confluence\\, and sends them to an MS Teams channel via a chat message</p> <p>Sends an email with the results of the build</p>"},{"location":"AutomationBuildServer/#customizing-the-jenkinsfile","title":"Customizing the Jenkinsfile","text":"<ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul> <p>Starting from the template</p> <ul> <li>The provided template Jenkinsfile is a starting point for your pipeline definition</li> <li>There are a few things in this file that must be adjusted for it to run properly for your system</li> <li>The following slides identify the purpose of each section in the Jenkinsfile and any changes you must make. There are 6 main sections in the Jenkinsfile pipeline:</li> <li>Variable Definitions  \u2013 Defines global variables</li> <li>Agent  \u2013 Defines where the pipeline will run within the Jenkins environment</li> <li>Environment  \u2013 Defines global environment variables</li> <li>Options  \u2013 Configures options</li> <li>Stages  \u2013 Defines the steps in the pipeline. If a stage fails\\, subsequent stages don\u2019t run</li> <li> <p>Post  \u2013 Always runs at the end of the pipeline\\, even if a stage fails</p> </li> <li> <p>Variables</p> </li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul>"},{"location":"AutomationBuildServer/#difference-between-variables-and-environment-variables","title":"Difference between Variables and Environment Variables","text":"<p>Additional Context</p> <p>Variables</p> <p>Defined outside the pipeline\\, at the top of the file</p> <p>All variables are global</p> <p>Environment Variables</p> <p>Defined within an environment{} section\\, either at the top level of the pipeline (for pipeline global environment variable declarations) or within a stage of the pipeline (for stage local declarations)</p> <p>Global environment variables can also be defined in the configuration of Jenkins. In this case\\, the variables are accessible to all pipelines</p> <p>There are also some built-in environment variables that can be used throughout any Jenkinsfile (analogous to System Variables in mapp View). A full list of predefined and readily available environment variables in Jenkins is available here.</p> <p>The built-in workspace environment variable (${WORKSPACE}) is not available until the pipeline starts running. Therefore\\, if the variable you are creating needs to reference the workspace\\, you must declare it as an environment variable. In our template file\\, this is why PROJECT_DIR and RELEASE_VERSION are declared as environment variables.</p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul>"},{"location":"AutomationBuildServer/#variables","title":"Variables","text":"<p>Customizing the Jenkinsfile</p> <p>Starting at the top of the Jenkinsfile\\, we will begin by adjusting the global variables. The following table describes each variable. Adjust the values accordingly:</p> Variable Name Description TEAMS_CHANNEL_URL Teams channel webhook URL where messages about the pipeline status will automatically be sent. \u000bFor more details on how to define this, refer to the \u201cOptions\u201d section. CONFIG_NAME Name of the configuration in the AS project that you are running through the pipeline UNIT_TEST_CONFIG_NAME Name of the unit test configuration in the AS project REPO_NAME Name of the GitHub repository. Only required if you plan to upload files to GitHub. REPO_ORGANIZATION Name of the GitHub organization. Only required if you plan to upload files to GitHub. CONFLUENCE_CRED_ID ID of the Personal Access Token for Confluence. Only required if you plan to upload files to Confluence.For more details, refer to the \u201cPost\u201d section. CONFLUENCE_PROJECT_ID Name of the confluence page. Only required if you plan to upload files to Confluence. CONFLUENCE_PAGE_NAME Name of the confluence page. Only required if you plan to upload files to Confluence. EMAIL_LIST List of email addresses that you want to send the results to, each separated by a semicolon <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul>"},{"location":"AutomationBuildServer/#agent","title":"Agent","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>Edit the \u201cagent\u201d line to identify the docker container your pipeline will run in. This simply depends on the AS version of your project</li> <li>Example: AS_412</li> </ul> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul>"},{"location":"AutomationBuildServer/#environment","title":"Environment","text":"<p>Customizing the Jenkinsfile</p> <p>The following table describes each environment variable. Adjust the values accordingly:</p> Variable Name Description PROJECT_DIR Specify the path within the repository to the AS project (the folder containing the .apj file). Use \\ for folder separation.Example: PROJECT_DIR = \"$WORKSPACE\\TestProject\u201cIf the project is stored in the root directory, then leave it defined as PROJECT_DIR = \"$WORKSPACE\" RELEASE_VERSION Holds the version number of the code in the repo. No changes required. <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul>"},{"location":"AutomationBuildServer/#options","title":"Options","text":"<p>Customizing the Jenkinsfile</p> <p></p> <ul> <li>The \u201coptions\u201d section sets up a webhook to a Teams channel so that you can automatically send information to that channel. This includes:</li> <li>Updates on when the pipeline has started / stopped</li> <li>Whether the pipeline succeeded</li> <li>The output files of the pipeline (By default in our template\\, the output files are the zipped up ARsim structure and PIP)</li> <li> <p>To establish this connection\\, you need to obtain your Teams channel webhook URL (see next slides) and paste it in the value for the TEAMS_CHANNEL_URL variable</p> </li> <li> <p>Variables</p> </li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul>"},{"location":"AutomationBuildServer/#obtaining-the-webhook-url","title":"Obtaining the Webhook URL","text":"<p>Microsoft Teams Connection</p> <p>Navigate to the channel in the Team that you want to establish the connection to</p> <p>Click the \u201c\u2026\u201d button</p> <p>Click \u201cConnectors\u201d</p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul> <p>Microsoft Teams Connection</p> <p>Navigate to the channel in the Team that you want to establish the connection to</p> <p>Click the \u201c\u2026\u201d button</p> <p>Click \u201cConnectors\u201d</p> <p>Click \u201cConfigure\u201d for \u201cIncoming Webhook\u201d</p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul> <p>Microsoft Teams Connection</p> <p></p> <p>Navigate to the channel in the Team that you want to establish the connection to</p> <p>Click the \u201c\u2026\u201d button</p> <p>Click \u201cConnectors\u201d</p> <p>Click \u201cConfigure\u201d for \u201cIncoming Webhook\u201d</p> <p>Give your webhook a name and click \u201cCreate\u201d</p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li>Post</li> </ul> <p>Microsoft Teams Connection</p> <p></p> <p>Navigate to the channel in the Team that you want to establish the connection to</p> <p>Click the \u201c\u2026\u201d button</p> <p>Click \u201cConnectors\u201d</p> <p>Click \u201cConfigure\u201d for \u201cIncoming Webhook\u201d</p> <p>Give your webhook a name and click \u201cCreate\u201d</p> <p>Afterwards\\, the URL you need will be populated in the field at the bottom. Copy this link and paste it at the top of the Jenkinsfile as the value of the TEAMS_CHANNEL_URL variable</p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Update Tags</p> </li> <li>Build AS Project</li> <li>Unit Tests</li> <li>Deploy</li> </ul>"},{"location":"AutomationBuildServer/#stages","title":"Stages","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>The next section in the pipeline is the stages.</li> <li>This is where you define the actions that the build server will perform.</li> <li>This is the \u201cmeat and potatoes\u201d of the pipeline.</li> <li>There are 4 stages set up in the template Jenkinsfile\\, which we will now go through one by one:</li> <li>Update Tags</li> <li>Build AS Project</li> <li>Unit Tests</li> <li> <p>Deploy</p> </li> <li> <p>Variables</p> </li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Update Tags</p> </li> <li>Build AS Project</li> <li>Unit Tests</li> <li>Deploy</li> </ul>"},{"location":"AutomationBuildServer/#stage-update-tags","title":"Stage: Update Tags","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>This stage force-pulls the tags in the repository</li> <li>Note that therefore\\, at least one tag must exist in the repo</li> <li>This information will be used later to create a version number</li> <li>No changes necessary</li> </ul> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Update Tags</p> </li> <li>Build AS Project</li> <li>Unit Tests</li> <li>Deploy</li> </ul>"},{"location":"AutomationBuildServer/#stage-build-as-project","title":"Stage: Build AS Project","text":"<p>Customizing the Jenkinsfile</p> <p>This stage builds the AS project</p> <p>A value of -1 for \u201cmax_warnings\u201d means you can have infinite warnings. If you optionally specify a positive value here\\, the stage will fail if the number of build warnings exceeds this value.</p> <p></p> <p>What if you want to run your pipeline for multiple configurations in the project \u2013 how would we do this?  You would just copy/paste the lines within each Step. So here, copy/paste the BuildASProject line for the additional config. Set this up with them during the initial meeting</p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Update Tags</p> </li> <li>Build AS Project</li> <li>Unit Tests</li> <li>Deploy</li> </ul>"},{"location":"AutomationBuildServer/#stage-unit-tests","title":"Stage: Unit Tests","text":"<p>Customizing the Jenkinsfile</p> <p>This stage runs the automated unit tests</p> <p>If the pipeline gets stuck on a unit test for longer than 15 minutes\\, the tests will fail. Optionally adjust this timeout value as desired.</p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Update Tags</p> </li> <li>Build AS Project</li> <li>Unit Tests</li> <li>Deploy</li> </ul>"},{"location":"AutomationBuildServer/#stage-deploy","title":"Stage: Deploy","text":"<p>Customizing the Jenkinsfile</p> <p>The template separates the deploy stage between release branches and feature/develop branches</p> <p>Therefore\\, you can trigger different actions depending on what branch you pushed to</p> <p>By default\\, both stages create the ARsim structure and Project Installation Package</p> <p>If you want to perform another action in either stage\\, add it accordingly</p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#post","title":"Post","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>The code within Post will always run\\, even if a stage in the pipeline fails</li> <li>Within Post\\, there are 3 subsections:</li> <li>Always  \u2013 runs in every single post processing</li> <li>Success  \u2013 runs if all unit tests pass</li> <li> <p>Unstable  \u2013 runs if any of the unit tests fail. This is classified as \u201cunstable\u201d rather than a failure because the pipeline itself completed\\, but the tests did not pass.</p> </li> <li> <p>Variables</p> </li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#post-always","title":"Post: Always","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>The \u201cAlways\u201d post script converts the B&amp;R Unit test results into a data format that Jenkins can understand what passed/failed</li> <li>Archives the ARsim structure and PIP so that they can be used in subsequent pipelines or uploaded to GitHub/Confluence/Teams</li> <li>Sends an email with the build status to the EMAIL_LIST recipients</li> <li> <p>The PIP that gets automatically generated uses the following installation settings:</p> <ul> <li>Consistent installation</li> <li>Allow updates without data loss</li> <li>Keep PV values</li> <li>Ignore version</li> <li>Always install</li> </ul> </li> <li> <p>Variables</p> </li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#example-of-a-successful-build-email-notification","title":"Example of a Successful Build Email Notification","text":"<p>All Tests Passed</p> <p></p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#example-of-an-unstable-build-email-notification","title":"Example of an Unstable Build Email Notification","text":"<p>Some Tests Failed</p> <p></p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#post-success-unstable","title":"Post: Success, Unstable","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>Both the \u201cSuccess\u201d and \u201cUnstable\u201d post scripts do the following:<ul> <li>Upload the artifacts to your destination of choice (GitHub\\, Confluence\\, or both)</li> <li>Send a message to the Teams channel with the status and artifact download links</li> </ul> </li> <li> <p>The only differences between these post scripts are:</p> <ul> <li>The color scheme (green for success\\, yellow for unstable)</li> <li>The text that gets used for the Teams message (\u201cBuild Success\u201d vs \u201cBuild Unstable\u201d).</li> </ul> </li> <li> <p>Variables</p> </li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#example-of-ms-teams-messages","title":"Example of MS Teams Messages","text":"<p>Success vs Unstable</p> <p></p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#post-success-unstable_1","title":"Post: Success, Unstable","text":"<p>Customizing the Jenkinsfile</p> <ul> <li>Required steps:</li> <li> <p>Comment/uncomment the upload lines according to your selected destination (GitHub/Confluence)</p> <ul> <li>If GitHub:</li> <li>Edit the REPO_NAME and REPO_ORGANIZATION variables at the top of the Jenkinsfile accordingly</li> </ul> </li> <li> <p>If Confluence:</p> </li> <li>Create a Personal Access Token (PAT) in Confluence. Steps are provided here in section \u201cCreating PATs in the application\u201d</li> <li>Add the PAT to the Jenkins project (detailed steps on subsequent slides)</li> <li>Edit the CONFLUENCE_CRED_ID variable value at the top of the Jenkinsfile to equal the ID of your PAT from step 2.</li> </ul> <p></p> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul>"},{"location":"AutomationBuildServer/#add-pat-to-jenkins-project","title":"Add PAT to Jenkins Project","text":"<p>For Uploading Files to Confluence</p> <ul> <li>To add a Personal Access Token (PAT) from Confluence to a Jenkins project:</li> <li>The output of the PAT in Confluence is a long text string. In the Jenkins project\\, go to Configure.</li> </ul> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul> <p>For Uploading Files to Confluence</p> <ul> <li>To add a Personal Access Token (PAT) from Confluence to a Jenkins project:</li> <li>Scroll down to the \u201cProperties\u201d section at the bottom. Beneath the \u201cRegistry Credentials\u201d dropdown\\, click the \u201cAdd\u201d button.</li> </ul> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul> <p>For Uploading Files to Confluence</p> <ul> <li>To add a Personal Access Token (PAT) from Confluence to a Jenkins project:</li> <li>Select your Jenkins project name from the dropdown.</li> </ul> <p></p> <ul> <li>Variables</li> <li>Agent</li> <li>Environment</li> <li>Options</li> <li>Stages</li> <li> <p>Post</p> </li> <li> <p>Always</p> </li> <li>Success</li> <li>Unstable</li> </ul> <p>For Uploading Files to Confluence</p> <ul> <li>To add a Personal Access Token (PAT) from Confluence to a Jenkins project:</li> <li>Change the \u201cKind\u201d to \u201csecret text\u201d. Paste your long PAT string in the \u201cSecret\u201d field. Give the credentials a meaningful ID. Remember the ID (this is what you need to specify in the Jenkinsfile). Click \u201cAdd\u201d at the bottom of the window to add your Confluence PAT to your Jenkins project.</li> </ul> <p></p>"},{"location":"AutomationBuildServer/#integration-with-bitbucket","title":"Integration with Bitbucket","text":""},{"location":"AutomationBuildServer/#integrate-jenkins-with-bitbucket","title":"Integrate Jenkins with Bitbucket","text":"<p>How-to</p> <p></p> <p>From the Bitbucket project\\, click on your user icon and select \u201cManage account\u201d</p> <p>Select \u201cHTTP access token\u201d in the menu on the left</p> <p>Click \u201cCreate token\u201d</p> <p></p> <p>How-to</p> <p></p> <p>Add a token name</p> <p>Set the Permissions to \u201cRepository read\u201d</p> <p>Click \u201cCreate\u201d</p> <p>How-to</p> <p>Make sure to copy the generated token as you will not be able view this again.</p> <p></p> <p>How-to</p> <p>Create new project in Jenkins</p> <p>Enter name of project</p> <p>Select multibranch pipeline</p> <p>How-to</p> <p>Add Credential</p> <p>Select project name</p> <p>Add source</p> <p>Select Bitbucket</p> <p></p> <p></p> <p>How-to</p> <p></p> <p>Change \u201cKind\u201d to \u201cUsername with password\u201d</p> <p>Paste HTTP access token created from Bitbucket</p> <p>Give unique ID</p> <p>How-to</p> <p>Select new Credential</p> <p>Set the \u201cOwner\u201d to the Bitbucket project key (4 letter identifier)</p> <p>Once Owner is entered\\, the Repository Name should show up in list</p> <p>How-to</p> <p>Then Add \u201cAdvanced clone behaviors\u201d</p> <p>And ensure that \u201cFetch tags\u201d is checked</p> <p></p> <p></p> <p>How-to</p> <p>After saving\\, the repositories will be scanned</p> <p></p>"},{"location":"AutomationBuildServer/#measurables","title":"Measurables","text":""},{"location":"AutomationBuildServer/#automation-and-build-server","title":"Automation and Build Server","text":"<p>Measurables</p> Measurable Purely B&amp;R Mix, B&amp;R Primary Mix, Customer Primary A Jenkins pipeline is in place, which at the very least runs your unit tests Required Required Maybe <p>Materials prepared by Brittany Langston &amp; Wesley Buchanan</p>"},{"location":"DevOpsPackageIntro/","title":"DevOps Package","text":"<p>Intro</p>"},{"location":"DevOpsPackageIntro/#contents","title":"Contents","text":"<p>DevOps Intro</p> <p></p> <p>Definition of DevOps</p> <p>Contents of this Package</p>"},{"location":"DevOpsPackageIntro/#what-is-devops","title":"What is DevOps?","text":""},{"location":"DevOpsPackageIntro/#common-problems-concerns","title":"Common Problems &amp; Concerns","text":"<p>AS Project Development</p> <p>Have you or your customers made comments like this?</p> <p>\u201cIt\u2019s difficult to keep track of what still needs to be done in this project\u201d</p> <p>\u201cI wish I could develop new features faster\u201d</p> <p>\u201cI need to somehow figure out how to do more work with less people\u201d</p> <p>\u201cI\u2019m too busy fighting fires\\, I don\u2019t have time to improve my processes\u201d</p> <p>\u201cIt takes too long to deploy bugfixes in the field\u201d</p> <p>\u201cI have a testing process\\, but it\u2019s tedious and time consuming\u201d</p> <p>\u201cI don\u2019t have a good systematic process for testing my code before deployment\u201d</p>"},{"location":"DevOpsPackageIntro/#solution-devops","title":"Solution: DevOps","text":"<p>AS Project Development</p> <p>One way to address these kinds of problems is a set of practices called  DevOps</p> <p></p>"},{"location":"DevOpsPackageIntro/#what-is-devops_1","title":"What is DevOps?","text":"<p>A Brief Definition</p> <p></p> <p>DevOps is the union of  dev elopment and IT  op erations to continually\\, reliably\\, and quickly provide product to customers</p> <p>A Brief Definition</p> <p></p> <p></p> <p>Product  = AS project</p> <p>Dev  = Applications Engineer tasks</p> <p>Ops  = Project Manager / Commissioning Engineer tasks</p> <p>Ops: creating the PIP, ARsim package, automated testing, etc</p> <p>A Brief Definition</p> <p>\u2026 to accomplish goals such as:</p> <p>Increasing productivity</p> <p>Increasing the frequency of deployments</p> <p>Increasing code quality</p> <p>Reducing response time for bugfixes</p> <p>Reducing fire-fighting</p> <p>DevOps involves things like\u2026</p> <p>Increasing the visibility of tasks and metrics</p> <p>Dividing and planning work in measurable chunks</p> <p>Optimizing team and project architecture</p> <p>Automated testing and reporting</p> <p></p>"},{"location":"DevOpsPackageIntro/#mission-statement","title":"Mission Statement","text":"<p>DevOps Package</p> <p>Implementing DevOps involves workflow changes\\, as well as a notable culture shift. Therefore\\, the mission and purpose of this DevOps package is:</p> <p>To significantly  __reduce the barriers to entry __ of DevOps strategies into the day-to-day workflow of B&amp;R applications engineers in order to  __increase the efficiency\\, quality\\, and maintainability __ of AS project development</p>"},{"location":"DevOpsPackageIntro/#br-americas-standard","title":"B&amp;R Americas Standard","text":"<p>DevOps Package</p> <p>The information in these materials is the new standard for AS project development in B&amp;R Americas</p> <p>There will be exceptions to the rule on a case-by-case basis\\, but this is now the defined starting point</p> <p></p>"},{"location":"DevOpsPackageIntro/#devops-package-contents","title":"DevOps Package Contents","text":""},{"location":"DevOpsPackageIntro/#_1","title":"DevOps Package Intro","text":"<p>To Do: Add a workflow from beginning to end\\, which touches on all 4 parts of the contents</p>"},{"location":"DevOpsPackageIntro/#devops-package-contents_1","title":"DevOps Package Contents","text":"<p>What\u2019s Included?</p> <p>The DevOps package includes material for the following subjects:</p> <p>Project Management</p> <p>Version Control</p> <p>Automation &amp; Build Server</p> <p>Testing</p> <p>There is also an overview PPT for the sales team to use to present the topic to customers. This PPT includes a script in the slide notes.</p> <p></p> <p>What\u2019s Included?</p> <p>For each of these subjects\\, the package contains  reference material  and  template files .</p> <p>Wherever applicable\\, we provide template files to expedite your implementation of that part of the DevOps process</p> <p>The reference material explains the conceptual information behind the subject\\, including what it is\\, why it\u2019s important\\, how you should implement it\\, and other various tips and tricks</p> <p></p> <p></p> <p>Reference Material</p> <p>Continuous Improvement over Time</p> <p>These materials will be added to and amended over time</p> <p>If you have any ideas or content that would be valuable to add\\, please inform Wes/Brittany</p> <p></p>"},{"location":"DevOpsPackageIntro/#get-started","title":"Get Started!","text":"<p>DevOps at B&amp;R</p> <p>To get started\\, open up the PPT for the topic of interest. The PPT will guide you through the topic and explain all template files as they come up.</p> <p>If you have any questions\\, please reach out to Brittany Langston or Wesley Buchanan.</p> <p></p>"}]}